import { useDB } from '@/hooks/use-db'
import { upload } from '@spheron/browser-upload'
import Head from 'next/head'
import { useForm } from 'react-hook-form'
import { useAccount, useConnect, useDisconnect } from 'wagmi'
import { InjectedConnector } from 'wagmi/connectors/injected'

type FormValues = {
  name: string
  description: string
  files: FileList
}

type CardData = {
  title: string
  description: string
  imageUrl: string
  date: string
}

const Card = ({ title, description, imageUrl, date }: CardData) => {
  return (
    <div className="card">
      <div className="card-content">
        <h2 className="card-title">{title}</h2>
        <p className="card-description">{description}</p>
        <p className="card-date">{new Date(parseInt(date)).toLocaleDateString()}</p>
        <a href={imageUrl}>Open Asset</a>
      </div>
    </div>
  )
}

export default function Home() {
  // Wagmi Connection
  const { address, isConnected } = useAccount()
  const { connect } = useConnect({
    connector: new InjectedConnector(),
  })
  const { disconnect } = useDisconnect()

  // DB
  const { myFiles, saveFile } = useDB()
  console.log('ðŸš€ ~ file: upload.tsx:16 ~ Home ~ myFiles:', myFiles)

  const { register, handleSubmit } = useForm<FormValues>()

  const uploadFile = async (files: File[]) => {
    const response = await fetch(`/api/token`) // get the temporary access token from server
    const resJson = await response.json()
    const token = resJson.uploadToken

    let currentlyUploaded = 0

    const { uploadId, bucketId, protocolLink, dynamicLinks } = await upload(files, {
      token,
      onChunkUploaded: (uploadedSize, totalSize) => {
        currentlyUploaded += uploadedSize
        console.log(`Uploaded ${currentlyUploaded} of ${totalSize} Bytes.`)
      },
    })
    console.log(
      'ðŸš€ ~ file: upload.tsx:28 ~ uploadFile ~ uploadId, bucketId, protocolLink, dynamicLinks:',
      uploadId,
      bucketId,
      protocolLink,
      dynamicLinks
    )
    return protocolLink
  }

  const onSubmit = async (data: FormValues) => {
    console.log('ðŸš€ ~ file: upload.tsx:31 ~ onSubmit ~ data:', data)
    const fileListArray = Array.from(data.files)

    const link = await uploadFile(fileListArray)
    await saveFile({ title: data.name, description: data.description, file: link })
  }

  if (isConnected)
    return (
      <div>
        Connected to {address}
        <button onClick={() => disconnect()}>Disconnect</button>
        <form onSubmit={handleSubmit(onSubmit)}>
          <label htmlFor="name">Name</label>
          <input defaultValue="test" {...register('name')} />

          <label htmlFor="description">Description</label>
          <input defaultValue="test" {...register('description')} />

          <label htmlFor="files">File</label>
          <input type="file" id="files" {...register('files')} />
          <input type="submit" />
        </form>
        <h2 className="mb-4 text-lg font-medium text-gray-800">Assets</h2>
        <div className="grid grid-cols-3 gap-4">
          {myFiles?.map((file) => {
            return (
              <Card
                key={file.data.id}
                title={file.data.title}
                description={file.data.description}
                imageUrl={file.data.file}
                date={file.data.date}
              />
            )
          })}
        </div>
      </div>
    )

  return (
    <>
      <Head>
        <title>Next Boilerplate by Spheron</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <button onClick={() => connect()}>Connect Wallet</button>
        <p>Hello World</p>
      </main>
    </>
  )
}
